<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context definition for JPetStore's data access layer.
  - Accessed by business layer objects defined in "applicationContext.xml"
  - (see web.xml's "contextConfigLocation").
  -
  - This version of the data access layer works on a combined database,
  - using a local DataSource with DataSourceTransactionManager. It does not
  - need any JTA support in the container: It will run as-is in plain Tomcat.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<context:component-scan base-package="org.springframework.bucket" />

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Local Apache Commons DBCP DataSource that refers to a combined database -->
	<!-- (see dataAccessContext-jta.xml for an alternative) -->
	<!-- The placeholders are resolved from jdbc.properties through -->
	<!-- the PropertyPlaceholderConfigurer in applicationContext.xml -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- Transaction manager for a single JDBC DataSource -->
	<!-- (see dataAccessContext-jta.xml for an alternative) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="org.springframework.samples.jpetstore.domain" />
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.springframework.samples.jpetstore.dao.mybatis.mapper" />
    </bean> -->
	
	<bean id="userDAO" class="org.springframework.bucket.dao.impl.JdbcTemplateUserDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<bean id="followDAO" class="org.springframework.bucket.dao.impl.JdbcTemplateFollowDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<bean id="bucketDAO" class="org.springframework.bucket.dao.impl.JdbcTemplateBucketDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<bean id="bucketTeamDAO" class="org.springframework.bucket.dao.impl.JdbcTemplateBucketTeamDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<bean id="bucketItemDAO" class="org.springframework.bucket.dao.impl.JdbcTemplateBucketItemDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<bean id="commentDAO" class="org.springframework.bucket.dao.impl.JdbcTemplateCommentDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<bean id="utilDAO" class="org.springframework.bucket.dao.impl.JdbcTemplateUtilDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<bean id="searchDAO" class="org.springframework.bucket.dao.impl.JdbcTemplateSearchDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<!-- JdbcTemplate을 이용한 예제  -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>	
	<!-- 아래의 DAO bean은  component-scan에 의해 자동 생성됨  -->
	<!-- 
	<bean id="jdbcTemplateCategoryDao"
		class="org.springframework.samples.jpetstore.dao.jdbc.JdbcTemplateCategoryDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean> -->
		
	<!-- NamedParameterJdbcTemplate을 이용한 예제  -->	
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg>
			<ref bean="dataSource"/>
		</constructor-arg>
	</bean>	
	<!-- 아래의 DAO bean은  component-scan에 의해 자동 생성됨  -->
	<!--
	<bean id="namedParameterJdbcTemplateCategoryDao"
		class="org.springframework.samples.jpetstore.dao.jdbc.NamedParamJdbcTemplateCategoryDao">
		<property name="jdbcTemplate" ref="namedParameterJdbcTemplate" />
	</bean> -->
	
	<!-- JdbcDaoSupport 클래스를 상속받은 구현 예 -->	
	<!-- JdbcCategoryDao는  dataSource를 직접 포함하지 않고 JdbcDaoSupport로부터 상속받기 때문에
		 아래의 DAO bean은  component-scan에 의해 자동 생성 불가  -->  
	
	<!-- pure JDBC API를 이용한 예제 -->
	<!-- 아래의 DAO bean은  component-scan에 의해 자동 생성됨  -->
	<!-- 
	<bean id="pureJdbcCategoryDao"
		class="org.springframework.samples.jpetstore.dao.jdbc.PureJdbcCategoryDao">
		<property name="dataSource" ref="dataSource" />
	</bean> -->
	
	
</beans>
